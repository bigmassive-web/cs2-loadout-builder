<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🔫 CS2 Loadout Price Challenge</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .header {
            background: rgba(0, 0, 0, 0.3);
            padding: 1rem;
            text-align: center;
            border-bottom: 2px solid #ff6b35;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(45deg, #ff6b35, #f7931e, #ff6b35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 20px rgba(255, 107, 53, 0.5);
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        .menu-screen {
            text-align: center;
            padding: 4rem 2rem;
        }

        .menu-buttons {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            max-width: 400px;
            margin: 3rem auto;
        }

        .btn {
            background: linear-gradient(45deg, #ff6b35, #f7931e);
            border: none;
            padding: 1rem 2rem;
            border-radius: 12px;
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(255, 107, 53, 0.4);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        .room-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 107, 53, 0.3);
        }

        .room-section h3 {
            color: #ff6b35;
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .input-group {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
            flex-wrap: wrap;
        }

        .input-group input {
            flex: 1;
            padding: 0.75rem;
            border-radius: 8px;
            border: 2px solid rgba(255, 107, 53, 0.3);
            background: rgba(0, 0, 0, 0.3);
            color: white;
            font-size: 1rem;
            min-width: 200px;
        }

        .input-group input:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 10px rgba(255, 107, 53, 0.3);
        }

        .room-code {
            font-size: 2rem;
            font-weight: bold;
            color: #ff6b35;
            text-align: center;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            letter-spacing: 3px;
            margin: 1rem 0;
        }

        .game-screen {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 2rem;
            min-height: 80vh;
        }

        .loadout-builder {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 2rem;
            backdrop-filter: blur(10px);
        }

        .weapon-category {
            margin-bottom: 2rem;
        }

        .category-title {
            color: #ff6b35;
            font-size: 1.3rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .weapon-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .weapon-card {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 1rem;
            border: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .weapon-card:hover {
            border-color: #ff6b35;
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(255, 107, 53, 0.2);
        }

        .weapon-card.selected {
            border-color: #ff6b35;
            background: rgba(255, 107, 53, 0.2);
        }

        .weapon-name {
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .skin-name {
            font-size: 0.9rem;
            color: #ccc;
        }

        .game-sidebar {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 2rem;
            backdrop-filter: blur(10px);
            height: fit-content;
        }

        .player-info {
            margin-bottom: 2rem;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 0.5rem;
        }

        .status-indicator.online {
            background: #4CAF50;
            box-shadow: 0 0 10px #4CAF50;
        }

        .status-indicator.offline {
            background: #666;
        }

        .target-value {
            font-size: 1.5rem;
            color: #ff6b35;
            text-align: center;
            margin: 1rem 0;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
        }

        .loadout-summary {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 1rem;
            margin: 1rem 0;
        }

        .selected-items {
            max-height: 200px;
            overflow-y: auto;
        }

        .selected-item {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .results-screen {
            text-align: center;
            padding: 2rem;
        }

        .winner-announcement {
            font-size: 3rem;
            color: #ff6b35;
            margin: 2rem 0;
            text-shadow: 0 0 20px rgba(255, 107, 53, 0.5);
        }

        .results-table {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem auto;
            max-width: 600px;
        }

        .result-row {
            display: flex;
            justify-content: space-between;
            padding: 1rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .countdown {
            font-size: 1.2rem;
            color: #ff6b35;
            text-align: center;
            margin: 1rem 0;
        }

        @media (max-width: 768px) {
            .game-screen {
                grid-template-columns: 1fr;
            }

            .weapon-grid {
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            }

            .header h1 {
                font-size: 1.8rem;
            }

            .input-group {
                flex-direction: column;
            }

            .input-group input {
                min-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔫 CS2 Loadout Price Challenge</h1>
        <p>Guess the most valuable loadout without seeing prices!</p>
    </div>

    <div class="game-container">
        <!-- Menu Screen -->
        <div class="screen active" id="menu-screen">
            <div class="menu-screen">
                <h2>Welcome to the Price Challenge!</h2>
                <p>Compete with a friend to build the most valuable CS2 loadout without seeing any prices. Whoever gets closest to the target value wins!</p>
                
                <div class="menu-buttons">
                    <button class="btn" onclick="showCreateRoom()">Create Room</button>
                    <button class="btn" onclick="showJoinRoom()">Join Room</button>
                </div>

                <div class="room-section" id="create-room" style="display: none;">
                    <h3>Create New Room</h3>
                    <div class="input-group">
                        <input type="text" id="player-name-create" placeholder="Your Name" maxlength="20">
                        <button class="btn" onclick="createRoom()">Create Room</button>
                    </div>
                </div>

                <div class="room-section" id="join-room" style="display: none;">
                    <h3>Join Existing Room</h3>
                    <div class="input-group">
                        <input type="text" id="player-name-join" placeholder="Your Name" maxlength="20">
                        <input type="text" id="room-code-input" placeholder="Room Code" maxlength="6">
                        <button class="btn" onclick="joinRoom()">Join Room</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Waiting Screen -->
        <div class="screen" id="waiting-screen">
            <div class="menu-screen">
                <h2>Room Created!</h2>
                <div class="room-code" id="display-room-code">ABCD12</div>
                <p>Share this code with your friend to join the game</p>
                <div class="player-info">
                    <div><span class="status-indicator online"></span><span id="player1-name">Player 1</span></div>
                    <div><span class="status-indicator offline" id="player2-status"></span><span id="player2-name">Waiting for Player 2...</span></div>
                </div>
                <button class="btn" id="start-game-btn" onclick="startGame()" style="display: none;">Start Game</button>
            </div>
        </div>

        <!-- Game Screen -->
        <div class="screen" id="game-screen">
            <div class="game-screen">
                <div class="loadout-builder">
                    <h2>Build Your Loadout</h2>
                    <div class="countdown" id="game-timer">Time remaining: 5:00</div>

                    <div class="weapon-category">
                        <div class="category-title">🔫 Rifles</div>
                        <div class="weapon-grid" id="rifles-grid"></div>
                    </div>

                    <div class="weapon-category">
                        <div class="category-title">🔫 Pistols</div>
                        <div class="weapon-grid" id="pistols-grid"></div>
                    </div>

                    <div class="weapon-category">
                        <div class="category-title">🔫 SMGs</div>
                        <div class="weapon-grid" id="smgs-grid"></div>
                    </div>

                    <div class="weapon-category">
                        <div class="category-title">🔪 Knives</div>
                        <div class="weapon-grid" id="knives-grid"></div>
                    </div>

                    <div class="weapon-category">
                        <div class="category-title">🧤 Gloves</div>
                        <div class="weapon-grid" id="gloves-grid"></div>
                    </div>
                </div>

                <div class="game-sidebar">
                    <div class="player-info">
                        <h3>Players</h3>
                        <div><span class="status-indicator online"></span><span id="game-player1">Player 1</span></div>
                        <div><span class="status-indicator online"></span><span id="game-player2">Player 2</span></div>
                    </div>

                    <div class="target-value">
                        Target: $<span id="target-amount">15,000</span>
                    </div>

                    <div class="loadout-summary">
                        <h4>Your Loadout</h4>
                        <div class="selected-items" id="selected-items"></div>
                        <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,255,255,0.2);">
                            <strong>Items Selected: <span id="items-count">0</span>/5</strong>
                        </div>
                    </div>

                    <button class="btn" onclick="submitLoadout()" id="submit-btn">Submit Loadout</button>
                </div>
            </div>
        </div>

        <!-- Results Screen -->
        <div class="screen" id="results-screen">
            <div class="results-screen">
                <div class="winner-announcement" id="winner-text">🏆 Winner: Player 1!</div>
                
                <div class="results-table">
                    <h3>Final Results</h3>
                    <div class="result-row">
                        <span>Target Value:</span>
                        <span>$<span id="final-target">15,000</span></span>
                    </div>
                    <div class="result-row">
                        <span id="result-player1-name">Player 1:</span>
                        <span>$<span id="result-player1-value">12,500</span> (Diff: $<span id="result-player1-diff">2,500</span>)</span>
                    </div>
                    <div class="result-row">
                        <span id="result-player2-name">Player 2:</span>
                        <span>$<span id="result-player2-value">16,200</span> (Diff: $<span id="result-player2-diff">1,200</span>)</span>
                    </div>
                </div>

                <button class="btn" onclick="playAgain()">Play Again</button>
            </div>
        </div>
    </div>

    <script>
        // Game state
        let gameState = {
            currentScreen: 'menu',
            roomCode: '',
            playerName: '',
            isHost: false,
            players: {},
            selectedItems: {},
            targetValue: 0,
            gameTimer: null,
            timeRemaining: 300 // 5 minutes
        };

        // Weapon data with realistic CS2 skin prices
        const weaponData = {
            rifles: [
                { name: 'AK-47', skin: 'Redline', price: 85 },
                { name: 'AK-47', skin: 'Vulcan', price: 650 },
                { name: 'AK-47', skin: 'Fire Serpent', price: 1200 },
                { name: 'M4A4', skin: 'Asiimov', price: 120 },
                { name: 'M4A4', skin: 'Howl', price: 4500 },
                { name: 'M4A1-S', skin: 'Hot Rod', price: 280 },
                { name: 'AWP', skin: 'Dragon Lore', price: 8500 },
                { name: 'AWP', skin: 'Lightning Strike', price: 450 }
            ],
            pistols: [
                { name: 'Glock-18', skin: 'Fade', price: 320 },
                { name: 'USP-S', skin: 'Kill Confirmed', price: 85 },
                { name: 'Desert Eagle', skin: 'Blaze', price: 380 },
                { name: 'Desert Eagle', skin: 'Printstream', price: 95 }
            ],
            smgs: [
                { name: 'P90', skin: 'Asiimov', price: 65 },
                { name: 'P90', skin: 'Death by Kitty', price: 180 },
                { name: 'MP7', skin: 'Fade', price: 75 }
            ],
            knives: [
                { name: 'Karambit', skin: 'Fade', price: 2800 },
                { name: 'M9 Bayonet', skin: 'Doppler', price: 1200 },
                { name: 'Butterfly Knife', skin: 'Tiger Tooth', price: 1800 },
                { name: 'Bayonet', skin: 'Marble Fade', price: 950 }
            ],
            gloves: [
                { name: 'Sport Gloves', skin: 'Pandoras Box', price: 1500 },
                { name: 'Driver Gloves', skin: 'Crimson Weave', price: 890 },
                { name: 'Specialist Gloves', skin: 'Emerald Web', price: 2200 },
                { name: 'Hand Wraps', skin: 'Cobalt Skulls', price: 280 }
            ]
        };

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
            gameState.currentScreen = screenId;
        }

        function showCreateRoom() {
            document.getElementById('create-room').style.display = 'block';
            document.getElementById('join-room').style.display = 'none';
        }

        function showJoinRoom() {
            document.getElementById('create-room').style.display = 'none';
            document.getElementById('join-room').style.display = 'block';
        }

        function generateRoomCode() {
            return Math.random().toString(36).substr(2, 6).toUpperCase();
        }

        function generateTargetValue() {
            // Generate a random target between $5,000 and $25,000
            return Math.floor(Math.random() * 20000) + 5000;
        }

        function createRoom() {
            const playerName = document.getElementById('player-name-create').value.trim();
            if (!playerName) {
                alert('Please enter your name');
                return;
            }

            gameState.roomCode = generateRoomCode();
            gameState.playerName = playerName;
            gameState.isHost = true;
            gameState.targetValue = generateTargetValue();
            gameState.players = {
                player1: { name: playerName, loadout: {}, totalValue: 0, submitted: false },
                player2: { name: '', loadout: {}, totalValue: 0, submitted: false }
            };

            document.getElementById('display-room-code').textContent = gameState.roomCode;
            document.getElementById('player1-name').textContent = playerName;
            
            showScreen('waiting-screen');
        }

        function joinRoom() {
            const playerName = document.getElementById('player-name-join').value.trim();
            const roomCode = document.getElementById('room-code-input').value.trim().toUpperCase();
            
            if (!playerName || !roomCode) {
                alert('Please enter your name and room code');
                return;
            }

            // Simulate joining room (in real app, this would be server communication)
            gameState.roomCode = roomCode;
            gameState.playerName = playerName;
            gameState.isHost = false;
            gameState.targetValue = generateTargetValue(); // Would be received from server
            
            // Simulate successful join
            gameState.players = {
                player1: { name: 'Host Player', loadout: {}, totalValue: 0, submitted: false },
                player2: { name: playerName, loadout: {}, totalValue: 0, submitted: false }
            };

            document.getElementById('player2-status').classList.remove('offline');
            document.getElementById('player2-status').classList.add('online');
            document.getElementById('player2-name').textContent = playerName;
            document.getElementById('start-game-btn').style.display = 'block';
            
            showScreen('waiting-screen');
        }

        function startGame() {
            initializeGameScreen();
            showScreen('game-screen');
            startTimer();
        }

        function initializeGameScreen() {
            // Set target value
            document.getElementById('target-amount').textContent = gameState.targetValue.toLocaleString();
            
            // Set player names
            document.getElementById('game-player1').textContent = gameState.players.player1.name;
            document.getElementById('game-player2').textContent = gameState.players.player2.name;
            
            // Create weapon grids
            Object.keys(weaponData).forEach(category => {
                createWeaponGrid(category);
            });
        }

        function createWeaponGrid(category) {
            const grid = document.getElementById(category + '-grid');
            grid.innerHTML = '';
            
            weaponData[category].forEach((weapon, index) => {
                const card = document.createElement('div');
                card.className = 'weapon-card';
                card.dataset.category = category;
                card.dataset.index = index;
                card.onclick = () => selectWeapon(category, index);
                
                card.innerHTML = `
                    <div class="weapon-name">${weapon.name}</div>
                    <div class="skin-name">${weapon.skin}</div>
                `;
                
                grid.appendChild(card);
            });
        }

        function selectWeapon(category, index) {
            // Check if max items selected (5 items max)
            if (Object.keys(gameState.selectedItems).length >= 5 && !gameState.selectedItems[category]) {
                alert('Maximum 5 items allowed!');
                return;
            }

            const card = document.querySelector(`[data-category="${category}"][data-index="${index}"]`);
            
            // If category already selected, deselect previous
            if (gameState.selectedItems[category] !== undefined) {
                const prevCard = document.querySelector(`[data-category="${category}"].selected`);
                if (prevCard) prevCard.classList.remove('selected');
            }
            
            // Select new item
            gameState.selectedItems[category] = index;
            card.classList.add('selected');
            
            updateLoadoutSummary();
        }

        function updateLoadoutSummary() {
            const container = document.getElementById('selected-items');
            container.innerHTML = '';
            
            let itemCount = 0;
            Object.keys(gameState.selectedItems).forEach(category => {
                const index = gameState.selectedItems[category];
                const weapon = weaponData[category][index];
                
                const item = document.createElement('div');
                item.className = 'selected-item';
                item.innerHTML = `
                    <span>${weapon.name} | ${weapon.skin}</span>
                    <button onclick="removeItem('${category}')" style="background: #ff4444; border: none; color: white; padding: 2px 6px; border-radius: 4px; cursor: pointer;">×</button>
                `;
                container.appendChild(item);
                itemCount++;
            });
            
            document.getElementById('items-count').textContent = itemCount;
        }

        function removeItem(category) {
            delete gameState.selectedItems[category];
            const card = document.querySelector(`[data-category="${category}"].selected`);
            if (card) card.classList.remove('selected');
            updateLoadoutSummary();
        }

        function startTimer() {
            gameState.timeRemaining = 300; // 5 minutes
            gameState.gameTimer = setInterval(() => {
                gameState.timeRemaining--;
                const minutes = Math.floor(gameState.timeRemaining / 60);
                const seconds = gameState.timeRemaining % 60;
                document.getElementById('game-timer').textContent = 
                    `Time remaining: ${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                if (gameState.timeRemaining <= 0) {
                    clearInterval(gameState.gameTimer);
                    submitLoadout();
                }
            }, 1000);
        }

        function submitLoadout() {
            if (gameState.gameTimer) {
                clearInterval(gameState.gameTimer);
            }

            // Calculate total value
            let totalValue = 0;
            Object.keys(gameState.selectedItems).forEach(category => {
                const index = gameState.selectedItems[category];
                totalValue += weaponData[category][index].price;
            });

            // Simulate both players' results (in real app, would wait for other player)
            const player1Value = totalValue;
            const player2Value = Math.floor(Math.random() * 20000) + 5000; // Simulate opponent
            
            const player1Diff = Math.abs(gameState.targetValue - player1Value);
            const player2Diff = Math.abs(gameState.targetValue - player2Value);
            
            showResults(player1Value, player2Value, player1Diff, player2Diff);
        }

        function showResults(player1Value, player2Value, player1Diff, player2Diff) {
            const winner = player1Diff < player2Diff ? gameState.players.player1.name : gameState.players.player2.name;
            
            document.getElementById('winner-text').textContent = `🏆 Winner: ${winner}!`;
            document.getElementById('final-target').textContent = gameState.targetValue.toLocaleString();
            
            document.getElementById('result-player1-name').textContent = gameState.players.player1.name + ':';
            document.getElementById('result-player1-value').textContent = player1Value.toLocaleString();
            document.getElementById('result-player1-diff').textContent = player1Diff.toLocaleString();
            
            document.getElementById('result-player2-name').textContent = gameState.players.player2.name + ':';
            document.getElementById('result-player2-value').textContent = player2Value.toLocaleString();
            document.getElementById('result-player2-diff').textContent = player2Diff.toLocaleString();
            
            showScreen('results-screen');
        }

        function playAgain() {
            // Reset game state
            gameState.selectedItems = {};
            gameState.targetValue = generateTargetValue();
            
            showScreen('menu-screen');
        }
    </script>
</body>
</html>
